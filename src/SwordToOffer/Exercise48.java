package SwordToOffer;

/**
 * 不用加减乘除做加法
 *
 *【无进位和运算就是按位异或结果，进位就是与运算结果但是需要左移一位，因为进位影响下一位的运算】❗️❗️❗️
 *
 * 拥有了两个基本表达式：
 * 执行加法 x ^ y
 * 进位操作 ( x & y ) << 1
 *
 * 二位加法：
 * 例子：
 *      正确的加法计算：11+01 = 100
 *
 *      按位加法： res1 = 11 ^ 01 = 10
 *      与运算进位： res2 = (11 & 01) << 1 = ( 01 ) << 1 = 010
 *
 *      res1 ^ res2 = 10 ^ 010 = 00
 *      (10 & 010) << 1 = 100
 *
 * 三位加法：
 * 例子：
 *       101 ^ 111 = 0010 （没有处理进位的加法）
 *       (101 & 111) << 1 = 101 << 1 = 1010 （此处得到哪一位需要加上进位，为1的地方表示有进位需要加上）
 *
 *       0010 ^ 1010 = 1000 （没有处理进位的加法 + 进位 = 没有处理进位的加法）
 *       (0010 & 1010) << 1 = 0010 << 1 = 00100 （查看是否有新的进位需要处理）
 *
 *       1000 ^ 00100 （没有处理进位的加法 + 进位 = 没有处理进位的加法）
 *       (1000 & 00100) << 1 = 00000 << 1 = 000000 (进位为0，所以没有要处理的进位了)
 *
 * */
public class Exercise48 {
    public int Add(int num1,int num2) {
        int result=0;
        int carry=0;
        do{    // 是do while!
            result=num1 ^ num2;
            carry=(num1 & num2) << 1;
            num1=result;
            num2=carry;
        }while (carry!=0);
        return result;
    }
}
